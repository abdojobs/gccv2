//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3082.
// 
namespace GpsSample.CW {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LiveTrackingSoap", Namespace="http://www.crossingways.com/")]
    public partial class LiveTracking : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public LiveTracking() {
            this.Url = "http://www.crossingways.com/services/livetracking.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossingways.com/VerifyCredentials", RequestNamespace="http://www.crossingways.com/", ResponseNamespace="http://www.crossingways.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VerifyCredentials(string username, string passwordhash, string control) {
            object[] results = this.Invoke("VerifyCredentials", new object[] {
                        username,
                        passwordhash,
                        control});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyCredentials(string username, string passwordhash, string control, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyCredentials", new object[] {
                        username,
                        passwordhash,
                        control}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndVerifyCredentials(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossingways.com/CurrentPosition", RequestNamespace="http://www.crossingways.com/", ResponseNamespace="http://www.crossingways.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CurrentPosition(string username, string password, double lat, double lon, double alt, double heading, System.DateTime timestamp, int trackid, int tracktypeid, string message) {
            object[] results = this.Invoke("CurrentPosition", new object[] {
                        username,
                        password,
                        lat,
                        lon,
                        alt,
                        heading,
                        timestamp,
                        trackid,
                        tracktypeid,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCurrentPosition(string username, string password, double lat, double lon, double alt, double heading, System.DateTime timestamp, int trackid, int tracktypeid, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CurrentPosition", new object[] {
                        username,
                        password,
                        lat,
                        lon,
                        alt,
                        heading,
                        timestamp,
                        trackid,
                        tracktypeid,
                        message}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCurrentPosition(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossingways.com/LogPositions", RequestNamespace="http://www.crossingways.com/", ResponseNamespace="http://www.crossingways.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogPositions(string username, string password, double[] lat, double[] lon, double[] alt, double[] heading, System.DateTime[] timestamp, int trackid, string message) {
            object[] results = this.Invoke("LogPositions", new object[] {
                        username,
                        password,
                        lat,
                        lon,
                        alt,
                        heading,
                        timestamp,
                        trackid,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogPositions(string username, string password, double[] lat, double[] lon, double[] alt, double[] heading, System.DateTime[] timestamp, int trackid, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LogPositions", new object[] {
                        username,
                        password,
                        lat,
                        lon,
                        alt,
                        heading,
                        timestamp,
                        trackid,
                        message}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLogPositions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossingways.com/UploadTrack", RequestNamespace="http://www.crossingways.com/", ResponseNamespace="http://www.crossingways.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTrack(string username, string password, string xmldoc) {
            object[] results = this.Invoke("UploadTrack", new object[] {
                        username,
                        password,
                        xmldoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadTrack(string username, string password, string xmldoc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadTrack", new object[] {
                        username,
                        password,
                        xmldoc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUploadTrack(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.crossingways.com/UploadGPX", RequestNamespace="http://www.crossingways.com/", ResponseNamespace="http://www.crossingways.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadGPX(string username, string password, string trackname, string gpx) {
            object[] results = this.Invoke("UploadGPX", new object[] {
                        username,
                        password,
                        trackname,
                        gpx});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadGPX(string username, string password, string trackname, string gpx, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadGPX", new object[] {
                        username,
                        password,
                        trackname,
                        gpx}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUploadGPX(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
}
